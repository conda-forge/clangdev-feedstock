{% set version = "13.0.1" %}
{% set major_version = version.split(".")[0] %}
{% set build_number = 3 %}

{% set minor_aware_ext = major_version %}
{% set minor_int = version.split(".")[1] | int %}
{% if minor_int > 0 %}
{% set minor_aware_ext = major_version + "." + version.split(".")[1] %}
{% endif %}

{% if not variant %}
{% set variant = "default" %}
{% endif %}

package:
  name: clang_packages
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/clang-{{ version.replace(".rc", "rc") }}.src.tar.xz
    sha256: 787a9e2d99f5c8720aa1773e4be009461cd30d3bd40fdd24591e473467c917c9
    patches:
      - patches/0001-Find-conda-gcc-installation.patch
      - patches/0002-Fix-sysroot-detection-for-linux.patch
      - patches/0003-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch
      - patches/0004-Fix-normalizeProgramName-s-handling-of-dots-outside-.patch
      - patches/0005-Set-VERSION-in-osx-as-well.patch
      - patches/0006-Fix-crosscompiling-LLVM-tools.patch
      # Disable -Werror,-Wundef-prefix=TARGET_OS as they are not yet defined in the 10.9 SDK used for osx-64
      # Only enable it for TARGET_OS_OSX.
      - patches/0007-Only-error-on-undefined-TARGET_OS_OSX.patch  # [osx and x86_64]
      #- patches/amd-roc-2.7.0.diff   # [variant != "hcc"]
      #- patches/amd-roc-hcc-2.7.0.diff  # [variant == "hcc"]
      - patches/Improve-logic-for-finding-the-macos-sysroot-for-cond.patch  # [osx]
      - patches/0008-Remove-trailing-null-bytes-from-the-sysroot-that-com.patch       # [variant and variant.startswith("root_")]
      - patches/root/0001-Temporary-parsers-should-not-manipulate-global-parse.patch  # [variant and variant.startswith("root_")]
      - patches/root/0002-Only-reset-extra-parsers-if-not-temporary.patch  # [variant and variant.startswith("root_")]
      - patches/root/0003-Let-autoload-act-on-fwd-declares.patch  # [variant and variant.startswith("root_")]
      - patches/root/0004-Extend-SubstTemplateTypeParmType-to-support-non-cano.patch  # [variant and variant.startswith("root_")]
      - patches/root/0005-Remove-macro-and-print-macro.patch  # [variant and variant.startswith("root_")]
      - patches/root/0006-From-Vassil-add-debug-printout-of-ModuleBuilder-data.patch  # [variant and variant.startswith("root_")]
      - patches/root/0007-Cleanup-cached-constant-.str-from-codegen.patch  # [variant and variant.startswith("root_")]
      - patches/root/0008-Implement-FileManager-uncaching.patch  # [variant and variant.startswith("root_")]
      - patches/root/0009-Adapt-the-user-of-invalidateCache-to-its-new-signatu.patch  # [variant and variant.startswith("root_")]
      - patches/root/0010-Mark-the-file-entry-invalid-until-reread.-Invalidate.patch  # [variant and variant.startswith("root_")]
      - patches/root/0011-In-cases-of-nested-parsing-at-execution-time-sometim.patch  # [variant and variant.startswith("root_")]
      - patches/root/0012-Implement-soft-reset-of-the-diagnostics-engine.patch  # [variant and variant.startswith("root_")]
      - patches/root/0013-Access-sema-internals-and-revert-the-list-of-unused-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0014-Propagate-cache-flags-from-LookupFile-to-FileManager.patch  # [variant and variant.startswith("root_")]
      - patches/root/0015-Pass-the-OpenFile-flag-also-to-DirectoryLookup.patch  # [variant and variant.startswith("root_")]
      - patches/root/0016-SrcMan-can-happen-for-Locs-from-the-command-line.patch  # [variant and variant.startswith("root_")]
      - patches/root/0017-Make-sure-the-inode-did-not-get-updated-since-we-rea.patch  # [variant and variant.startswith("root_")]
      - patches/root/0018-More-RAIIs-for-autoloading.patch  # [variant and variant.startswith("root_")]
      - patches/root/0019-Fix-cling-teardown-issues-when-a-pch-is-attached.-Ku.patch  # [variant and variant.startswith("root_")]
      - patches/root/0020-Use-raw-string-literals-to-correctly-stringify-and-i.patch  # [variant and variant.startswith("root_")]
      - patches/root/0021-Accessor-to-is-file-opened-this-is-crucial-info-for-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0022-Buffer-the-pending-instantiations-in-case-or-recursi.patch  # [variant and variant.startswith("root_")]
      - patches/root/0023-Also-store-Parser-paren-numbers-likely-fixes-ROOT-69.patch  # [variant and variant.startswith("root_")]
      - patches/root/0024-Allow-switching-of-CodeGen-llvm-Module.patch  # [variant and variant.startswith("root_")]
      - patches/root/0025-Hand-over-deferred-objects-to-the-new-CGModule-fixes.patch  # [variant and variant.startswith("root_")]
      - patches/root/0026-CGModule-can-have-pending-WeakRefReferences-carry-ov.patch  # [variant and variant.startswith("root_")]
      - patches/root/0027-Provide-possibly-updated-CodegenOpts-to-StartModule.patch  # [variant and variant.startswith("root_")]
      - patches/root/0028-Clear-pending-decls-from-Builder-in-case-of-errors-R.patch  # [variant and variant.startswith("root_")]
      - patches/root/0029-Fix-ROOT-7775-by-making-all-static-init-function-nam.patch  # [variant and variant.startswith("root_")]
      - patches/root/0030-Inject-DeclUnloader-as-a-friend.patch  # [variant and variant.startswith("root_")]
      - patches/root/0031-Do-not-load-the-source-file-just-to-get-an-irrelevan.patch  # [variant and variant.startswith("root_")]
      - patches/root/0032-Find-an-easier-way-of-accessing-CodeGenModule-intern.patch  # [variant and variant.startswith("root_")]
      - patches/root/0033-CLING-Move-cling-DeclUnloader-and-ParserStateRAII-in.patch  # [variant and variant.startswith("root_")]
      - patches/root/0034-Do-not-collect-DeleteExprs-over-incremental-end-of-T.patch  # [variant and variant.startswith("root_")]
      - patches/root/0035-In-the-RAII-ctor-set-private-Parser-fields-to-defaul.patch  # [variant and variant.startswith("root_")]
      - patches/root/0036-Keep-the-collection-of-EmittedDeferredDecls-for-subs.patch  # [variant and variant.startswith("root_")]
      - patches/root/0037-Pass-mangled-name-to-CodeGenerator-forgetDecl.-From-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0038-Keep-into-account-if-files-were-virtual.patch  # [variant and variant.startswith("root_")]
      - patches/root/0039-cxxmodules-Don-t-complain-when-modulemap-for-implici.patch  # [variant and variant.startswith("root_")]
      - patches/root/0040-Preserve-AnonStructIds-of-mangling-ctx.patch  # [variant and variant.startswith("root_")]
      - patches/root/0041-Allow-interfaces-to-operate-on-in-memory-buffers-wit.patch  # [variant and variant.startswith("root_")]
      - patches/root/0042-Remove-argument-from-module-ctor-dtor-signatures.patch  # [variant and variant.startswith("root_")]
      - patches/root/0043-cxxmodules-Don-t-complain-when-modulemap-for-implici.patch  # [variant and variant.startswith("root_")]
      - patches/root/0044-Try-current-version-of-D41416-modules-pch-Do-not-des.patch  # [variant and variant.startswith("root_")]
      - patches/root/0045-Reinstate-version-of-root-project-root-c9307811.patch  # [variant and variant.startswith("root_")]
      - patches/root/0046-Improve-ROOT-startup-time-by-not-merging-identifier-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0047-Default-template-parameter-of-class-template-instanc.patch  # [variant and variant.startswith("root_")]
      - patches/root/0048-New-file-for-4453ba7.patch  # [variant and variant.startswith("root_")]
      - patches/root/0049-Make-llvm_unreachable-an-assert-for-uncomparable-src.patch  # [variant and variant.startswith("root_")]
      - patches/root/0050-Before-generating-a-template-instantiation-check-if-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0051-Duplicate-declarations-of-template-default-argument-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0052-Add-support-for-default-template-parameters-that-con.patch  # [variant and variant.startswith("root_")]
      - patches/root/0053-Implement-implicit-auto-keyword-injection-in-clang-i.patch  # [variant and variant.startswith("root_")]
      - patches/root/0054-Update-the-DeclContext-used-for-lookup-to-point-to-t.patch  # [variant and variant.startswith("root_")]
      - patches/root/0055-Update-another-lookup-ctx-after-AutoParse.patch  # [variant and variant.startswith("root_")]
      - patches/root/0056-Expose-all-files-included-in-PCH-PCM-to-FileManager.patch  # [variant and variant.startswith("root_")]
      - patches/root/0057-Disable-diags-of-dupe-default-args-func-templt-tempo.patch  # [variant and variant.startswith("root_")]
      - patches/root/0058-Silence-enum-typed-untyped-redecl-until-fwd-decl-can.patch  # [variant and variant.startswith("root_")]
      - patches/root/0059-Mark-implicit-members-coming-from-a-PCH-as-used.patch  # [variant and variant.startswith("root_")]
      - patches/root/0060-Do-not-read-the-source-file-to-emit-annotations.patch  # [variant and variant.startswith("root_")]
      - patches/root/0061-Do-not-read-the-file-to-determine-its-name.patch  # [variant and variant.startswith("root_")]
      - patches/root/0062-Store-token-literal-data-in-PCH.-Avoids-disk-read-on.patch  # [variant and variant.startswith("root_")]
      - patches/root/0063-Add-RAII-to-buffer-delayed-infos-for-recursive-parsi.patch  # [variant and variant.startswith("root_")]
      - patches/root/0064-Handle-failure-in-auto-auto-deduction.patch  # [variant and variant.startswith("root_")]
      - patches/root/0065-Spaces.patch  # [variant and variant.startswith("root_")]
      - patches/root/0066-Improve-int-literal-printing-for-template-args.-To-b.patch  # [variant and variant.startswith("root_")]
      - patches/root/0067-Update-the-DeclContext-used-for-lookup-to-point-to-t.patch  # [variant and variant.startswith("root_")]
      - patches/root/0068-Refactor-in-RequireCompleteDeclContext-the-Update-th.patch  # [variant and variant.startswith("root_")]
      - patches/root/0069-Fix-fwddecls-of-templates-with-tmplt-arg-defauls-com.patch  # [variant and variant.startswith("root_")]
      - patches/root/0070-D39714-cxxmodules-Refactor-generation-counter-in-LLV.patch  # [variant and variant.startswith("root_")]
      - patches/root/0071-Do-not-unload-enum-fwd-decl-but-silence-redecl-diag-.patch  # [variant and variant.startswith("root_")]
      - patches/root/0072-Fixes-Issue-6812.patch  # [variant and variant.startswith("root_")]
      - patches/root/0073-Reset-the-LexLevel-when-parsing-recursively.patch  # [variant and variant.startswith("root_")]
      - patches/root/0074-Add-support-for-DiagnosticEngine-state-change-within.patch  # [variant and variant.startswith("root_")]
      - patches/root/0075-Allow-cling-as-ASTSource-to-complete-tmplt-spec.patch  # [variant and variant.startswith("root_")]
      - patches/root/0076-When-unloading-also-forget-that-the-decl-was-emitted.patch  # [variant and variant.startswith("root_")]
      - patches/root/0077-Disable-validation-of-transent-files.patch  # [variant and variant.startswith("root_")]
      - patches/root/0078-Add-missing-include-to-fix-Dcxxmodules-On.patch  # [variant and variant.startswith("root_")]
      - patches/root/0079-Import-various-changes-to-the-global-module-index.patch  # [variant and variant.startswith("root_")]
      - patches/root/0080-Swap-also-TBAA-as-it-references-OldBuilder-CXXABI.patch  # [variant and variant.startswith("root_")]
      - patches/root/0081-Do-not-install-Clang-Cling-Config.cmake-in-the-proje.patch  # [variant and variant.startswith("root_")]
      - patches/root/0082-AST-Print-honor-AlwaysIncludeTypeForTemplateArgument.patch  # [variant and variant.startswith("root_")]
      - patches/root/0083-Relax-assertion-on-generating-destructor-call.patch  # [variant and variant.startswith("root_")]
      - patches/root/0001-Deserialize-LValuePathSerializationHelper-s-type-pro.patch  # [variant and variant.startswith("root_")]
      - patches/root/0002-Do-not-evaluate-value-dependent-immediate-invocation.patch  # [variant and variant.startswith("root_")]
      - patches/root/0003-Backport-clang-Allocate-2-bits-to-store-the-constexp.patch  # [variant and variant.startswith("root_")]
      - patches/root/0004-Implement-a-module-attribute-optional-to-allow-missi.patch  # [variant and variant.startswith("root_")]
      - patches/root/0005-Add-cplusplus20-as-module-requirement.patch  # [variant and variant.startswith("root_")]
      - patches/root/0006-survive-Inon-accessible-directory.patch  # [variant and variant.startswith("root_")]
    folder: .
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/clang-tools-extra-{{ version.replace(".rc", "rc") }}.src.tar.xz
    sha256: cc2bc8598848513fa2257a270083e986fd61048347eccf1d801926ea709392d0
    folder: tools/extra

build:
  number: {{ build_number }}
  skip: true  # [(win and vc<14) or variant=="hcc"]

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake >=3.4.3
    # Needed to unpack the source tarball
    - m2w64-xz  # [win]
    # "compiling .pyc files" fails without this
    - python >3
    # Building with ninja on windows for parallel builds
    - ninja  # [win]
    - make   # [unix]
    - llvmdev =={{ version }}    # [build_platform != target_platform]
  host:
    - libcxx {{ cxx_compiler_version }}  # [osx]
    - llvmdev =={{ version }}
    - zlib                               # [linux or win]

test:
  requires:
    - {{ compiler('cxx') }}
    - cmake >=3.4.3
  files:
    - mytest.c
  commands:
    - $PREFIX/bin/clang --version  # [unix]
    - $PREFIX/bin/clang++ --version  # [unix]
    - $PREFIX/bin/clang-check --version  # [unix]

    - $PREFIX/bin/clang -v -c mytest.c      # [unix]
    - '%LIBRARY_BIN%/clang -v -c mytest.c'  # [win]

    - if not exist %LIBRARY_INC%\\clang\\Lex\\Lexer.h exit 1  # [win]
    - test -f $PREFIX/include/clang/Lex/Lexer.h      # [unix]
    - test -f $PREFIX/lib/libclangBasic.a            # [unix]


outputs:
  - name: clangdev
    script: install_clangdev.sh  # [unix]
    script: install_clangdev.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - zlib                               # [linux or win]
      run:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
        - llvmdev =={{ version }}
    test:
      commands:
        - test -f "$PREFIX/include/clang/Config/config.h"   # [unix]
        - test -f "$PREFIX/lib/libclangAST.a"               # [unix]
        - if not exist %LIBRARY_INC%\\clang/Config/config.h exit 1   # [win]
        - if not exist %LIBRARY_LIB%\\clangAST.lib exit 1            # [win]

  - name: libclang-cpp{{ minor_aware_ext }}
    script: install_libclang_cpp.sh  # [unix]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, max_pin="x.x") }}   # [unix]
      skip: true  # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib   # [linux]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
    test:
      commands:
        - test ! -f "$PREFIX/lib/libclang-cpp.so"                             # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}"         # [linux]
        - test ! -f "$PREFIX/lib/libclang-cpp.dylib"                          # [osx]
        - test -f "$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib"      # [osx]

  - name: libclang-cpp
    script: install_libclang_cpp.sh  # [unix]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      {% if not win %}
      run_exports:   # [unix]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, max_pin="x.x") }}   # [unix]
      {% endif %}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib   # [linux]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, exact=True) }}  # [unix]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, exact=True) }}  # [unix]
    test:
      commands:
        - test -f "$PREFIX/lib/libclang-cpp.so"                     # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.dylib"                  # [osx]
        - if exist %LIBRARY_BIN%\\libclang-cpp.dll exit 1           # [win]

  - name: libclang
    script: install_libclang.sh  # [unix]
    script: install_libclang.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        - libclang {{ minor_aware_ext }}.*
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja                      # [win]
        - make                       # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - libcxx {{ cxx_compiler_version }}             # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib                                          # [linux or win]
        - {{ pin_subpackage("clang", exact=True) }}
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
    test:
      commands:
        - test -f "$PREFIX/lib/libclang.so"                           # [linux]
        - test -f "$PREFIX/lib/libclang.so.{{ minor_aware_ext }}"     # [linux]
        {% if minor_aware_ext != major_version %}
        - test ! -f "$PREFIX/lib/libclang.so.{{ major_version }}"     # [linux]
        - test ! -f "$PREFIX/lib/libclang.{{ major_version }}.dylib"  # [osx]
        {% endif %}
        - test -f "$PREFIX/lib/libclang.dylib"                        # [osx]
        - test -f "$PREFIX/lib/libclang.{{ minor_aware_ext }}.dylib"  # [osx]
        - if not exist %LIBRARY_BIN%\\libclang.dll exit 1             # [win]

  - name: clang-{{ major_version }}
    script: install_clang.sh  # [unix]
    script: install_clang.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - libcxx                             # [osx]
        - cmake >=3.4.3
        - ninja                              # [win]
        - make                               # [unix]
        - llvmdev =={{ version }}            # [build_platform != target_platform]
      host:
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib                               # [linux or win]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, exact=True) }}  # [unix]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}                        # [osx]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, exact=True) }}  # [unix]
      run_constrained:
        - clangdev {{ version }}
        - clangxx {{ version }}
        - clang-tools {{ version }}
        - llvm-tools {{ version }}
    test:
      commands:
        - clang-{{ major_version }} --version
        - test ! -f "$PREFIX/bin/clang"                                   # [unix]
        - test ! -f "$PREFIX/bin/clang-cl"                                # [unix]
        - test ! -f "$PREFIX/bin/clang-cpp"                               # [unix]
        - if exist %LIBRARY_BIN%\\clang.exe exit 1                        # [win]
        - if exist %LIBRARY_BIN%\\clang-cl.exe exit 1                     # [win]
        - if exist %LIBRARY_BIN%\\clang-cpp.exe exit 1                    # [win]
        - test ! -f "$PREFIX/lib/libclang-cpp.so"                         # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}"     # [linux]
        - test ! -f "$PREFIX/lib/libclang-cpp.dylib"                      # [osx]
        - test -f "$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib"  # [osx]
        - test -f "$PREFIX/lib/clang/{{ '.'.join(version.split('.')[:3]) }}/include/stdatomic.h"                    # [unix]
        - if not exist %LIBRARY_LIB%\\clang\\{{ '.'.join(version.split('.')[:3]) }}\\include\\stdatomic.h exit 1    # [win]

  - name: clang
    script: install_clang_symlinks.sh  # [unix]
    script: install_clang_symlinks.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      host:
        - zlib                            # [win]
        - gcc_impl_{{ target_platform }}  # [linux]
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
      run:
        - gcc_impl_{{ target_platform }}  # [linux]
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
    test:
      commands:
        - clang --version
        - clang-cl --version
        - clang-cpp --version

  - name: clangxx
    script: install_clangxx.sh  # [unix]
    script: install_clangxx.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      host:
        - zlib  # [win]
        - {{ pin_subpackage("clang", exact=True) }}
      run:
        - {{ pin_subpackage("clang", exact=True) }}
    test:
      requires:
        - {{ compiler("cxx") }}
      files:
        - mytest.cxx
      commands:
        - clang++ --version
        - clang++ -v -c mytest.cxx

  - name: clang-format-{{ major_version }}
    script: install_clang_format.sh  # [unix]
    script: install_clang_format.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      # for windows, use the clang-format package.
      skip: true  # [win]
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib                            # [linux or win]
        - libxml2                         # [win]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, max_pin="x.x") }}   # [unix]
    test:
      commands:
        - clang-format-{{ major_version }} --version
        - test ! -f ${PREFIX}/bin/clang-format                   # [unix]
        - if exist %LIBRARY_BIN%\\clang-format.exe exit 1        # [win]
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]
        - if exist %LIBRARY_BIN%\\c-index-test.exe exit 1        # [win]

  - name: clang-format
    script: install_clang_format.sh  # [unix]
    script: install_clang_format.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format-" + major_version, exact=True) }}   # [unix]
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib                               # [linux or win]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, max_pin="x.x") }}   # [unix]
        - {{ pin_subpackage("clang-format-" + major_version, exact=True) }}   # [unix]
    test:
      commands:
        - clang-format --version
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]
        - if exist %LIBRARY_BIN%\\c-index-test.exe exit 1        # [win]

  - name: clang-tools
    script: install_clang_tools.sh  # [unix]
    script: install_clang_tools.bat  # [win]
    build:
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ compiler('cxx') }}
        - cmake >=3.4.3
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format", exact=True) }}
        - libcxx {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - llvm =={{ version }}
        - zlib                               # [linux or win]
      run:
        - {{ pin_compatible("libcxx", max_pin=None) }}  # [osx]
        - {{ pin_subpackage("clang-format", exact=True) }}
        - {{ pin_subpackage("libclang-cpp" + minor_aware_ext, max_pin="x.x") }}   # [unix]
        - libclang {{ minor_aware_ext }}.*   # [unix]
      run_constrained:
        - clangdev {{ version }}
    test:
      commands:
        - clang-check --version
        - clang-tidy --version

  - name: python-clang
    build:
      noarch: python
      # Building this output using this recipe is only supported on unix
      # It can still be installed on Windows as it is marked as `noarch: python`
      skip: true  # [win or variant=="hcc" or (build_platform != target_platform)]
      track_features:
        - hcc          # [variant=="hcc"]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    script: build_python_bindings.sh
    requirements:
      host:
        - python
      run:
        - python
        - libclang =={{ version }}
    test:
      source_files:
        - bindings/python/tests
        - bindings/python/examples/cindex
      imports:
        - clang
        - clang.cindex
      commands:
        - cd bindings/python
        - python -m unittest discover -v

about:
  home: http://llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for Clang

extra:
  recipe-maintainers:
    - inducer
    - isuruf
    - jakirkham
    - SylvainCorlay
    - timsnyder
    - chrisburr
    - xhochy
    - h-vetinari
