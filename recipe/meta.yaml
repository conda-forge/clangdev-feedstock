{% set version = "21.0.0.dev1" %}
{% set major_version = version.split(".")[0] %}
{% set tail_version = version.split(".")[-1] %}
{% set build_number = 0 %}

# always includes minor as of v18, see https://github.com/llvm/llvm-project/issues/76273
{% set maj_min = major_version ~ "." ~ version.split(".")[1] %}

# construct full sover, which contains extra suffixes for rc/dev builds
# as of LLVM 19, we expect an "-rcX" suffix for the release candidates
{% set extra = "-" ~ tail_version if tail_version not in "0123456789" else "" %}
{% set extra = "git" if tail_version|trim("0123456789") == "dev" else extra %}
{% set sover = maj_min ~ extra %}

{% if libclang_soversion is not defined %}
# see https://github.com/llvm/llvm-project/blob/release/18.x/clang/tools/libclang/CMakeLists.txt
{% set libclang_soversion = "13" %}
{% endif %}

package:
  name: clang_packages
  version: {{ version }}

source:
  # - url: https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-{{ version.replace(".rc", "-rc") }}.tar.gz
  - url: https://github.com/llvm/llvm-project/archive/e5129b7e2092c54e503f60cc0ac552c765d5a144.tar.gz
    sha256: f8506cf5d53a5d555384a8917432db40ef8a2b89a5172d64f8a753b649f0274b
    patches:
      - patches/0001-Find-conda-gcc-installation.patch
      - patches/0002-Fix-sysroot-detection-for-linux.patch
      - patches/0003-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch
      - patches/0004-Fix-normalizeProgramName-s-handling-of-dots-outside-.patch
      - patches/0005-Set-VERSION-in-osx-as-well.patch
      - patches/0006-Fix-crosscompiling-LLVM-tools.patch
      - patches/0007-set-libclang-SOVERSION-unconditionally.patch
      - patches/0008-Make-PIE-default-on-macOS-too.patch
      - patches/0009-Find-ROCm-device-library-in-conda-layout.patch
      - patches/0010-Add-conda-mingw-paths.patch
    # name folder for easier deletion; we do the equivalent of downloading
    # the subproject sources, so the work folder then has clang in it;
    # for details see build scripts
    folder: llvm-project

build:
  number: {{ build_number }}

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja  # [win]
    - make   # [unix]
    # "compiling .pyc files" fails without this
    - python >3
    - llvmdev =={{ version }}    # [build_platform != target_platform]
    - libxml2                    # [build_platform != target_platform]
    - zlib                       # [build_platform != target_platform]
    - zstd                       # [build_platform != target_platform]
  host:
    - libcxx-devel {{ cxx_compiler_version }}   # [osx]
    - llvmdev =={{ version }}
    - libxml2
    - zlib
    - zstd

outputs:
  - name: clangdev
    script: install_clangdev.sh  # [unix]
    script: install_clangdev.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        # cannot pin to `cxx_compiler_version` here,
        # because clangxx pins libcxx-devel to `maj_min`
        - libcxx-devel =={{ maj_min }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - llvmdev =={{ version }}
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      requires:
        - {{ compiler('cxx') }}
        - cmake
      files:
        - mytest.c
      commands:
        # static library
        - test -f $PREFIX/lib/libclangAST.a                         # [unix]
        - test -f $PREFIX/lib/libclangBasic.a                       # [unix]
        - if not exist %LIBRARY_LIB%\clangAST.lib exit 1            # [win]
        - if not exist %LIBRARY_LIB%\clangBasic.lib exit 1          # [win]

        # headers
        - test -f $PREFIX/include/clang/Config/config.h             # [unix]
        - test -f $PREFIX/include/clang/Lex/Lexer.h                 # [unix]
        - if not exist %LIBRARY_INC%\clang\Config\config.h exit 1   # [win]
        - if not exist %LIBRARY_INC%\clang\Lex\Lexer.h exit 1       # [win]

        # symlinks
        - $PREFIX/bin/clang --version           # [unix]
        - $PREFIX/bin/clang++ --version         # [unix]
        - $PREFIX/bin/clang-check --version     # [unix]

        # basic compilation
        - $PREFIX/bin/clang -v -c mytest.c      # [unix]
        - '%LIBRARY_BIN%/clang -v -c mytest.c'  # [win]

  - name: libclang-cpp{{ maj_min }}
    script: install_libclang_cpp.sh  # [unix]
    files:
      - lib/libclang-cpp.so.{{ sover }}     # [linux]
      - lib/libclang-cpp.{{ sover }}.dylib  # [osx]
    build:
      skip: true  # [win]
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, max_pin="x.x") }}   # [unix]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - llvm =={{ version }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        # presence of versioned library
        - test -f $PREFIX/lib/libclang-cpp.so.{{ sover }}       # [linux]
        - test -f $PREFIX/lib/libclang-cpp.{{ sover }}.dylib    # [osx]

        # absence of unversioned library
        - test ! -f $PREFIX/lib/libclang-cpp.so                 # [linux]
        - test ! -f $PREFIX/lib/libclang-cpp.dylib              # [osx]

  - name: libclang-cpp
    # note that this is just an empty wrapper on windows
    script: install_libclang_cpp.sh  # [unix]
    files:                      # [unix]
      - lib/libclang-cpp.so     # [linux]
      - lib/libclang-cpp.dylib  # [osx]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:   # [unix]
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, max_pin="x.x") }}   # [unix]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, exact=True) }}  # [unix]
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, exact=True) }}  # [unix]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        # presence on unix
        - test -f $PREFIX/lib/libclang-cpp.so                     # [linux]
        - test -f $PREFIX/lib/libclang-cpp.dylib                  # [osx]

        # absence on windows
        - if exist %LIBRARY_BIN%\libclang-cpp.dll exit 1          # [win]

  - name: libclang{{ libclang_soversion }}
    script: install_libclang.sh  # [unix]
    script: install_libclang.bat  # [win]
    files:
      - Library/bin/libclang-{{ libclang_soversion }}.dll   # [win]
      - lib/libclang.so.{{ libclang_soversion }}            # [linux]
      - lib/libclang.{{ libclang_soversion }}.dylib         # [osx]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        # note that the name (e.g. libclang13) does not necessarily
        # match the version lower bound (e.g. >=14.0.0)
        - {{ pin_subpackage("libclang" ~ libclang_soversion, max_pin=None) }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja                      # [win]
        - make                       # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("clang", exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        # presence of versioned libraries
        - test -f $PREFIX/lib/libclang.so.{{ libclang_soversion }}                  # [linux]
        - test -f $PREFIX/lib/libclang.{{ libclang_soversion }}.dylib               # [osx]
        - if not exist %LIBRARY_BIN%\libclang-{{ libclang_soversion }}.dll exit 1   # [win]

        # absence of unversioned libraries
        - test ! -f $PREFIX/lib/libclang.so                                 # [linux]
        - test ! -f $PREFIX/lib/libclang.dylib                              # [osx]
        - if exist %LIBRARY_BIN%\libclang.dll exit 1                        # [win]
        - if exist %LIBRARY_LIB%\libclang.lib exit 1                        # [win]

        {% if libclang_soversion != major_version %}
        # absence of major version if soversion is different
        - test ! -f $PREFIX/lib/libclang.so.{{ major_version }}             # [linux]
        - test ! -f $PREFIX/lib/libclang.{{ major_version }}.dylib          # [osx]
        - if exist %LIBRARY_BIN%\libclang-{{ major_version }}.dll exit 1    # [win]

        # same for full version (i.e. with major that doesn't match soversion)
        - test ! -f $PREFIX/lib/libclang.so.{{ version }}                   # [linux]
        - test ! -f $PREFIX/lib/libclang.{{ version }}.dylib                # [osx]
        - if exist %LIBRARY_BIN%\libclang-{{ version }}.dll exit 1          # [win]
        {% endif %}

  - name: libclang
    script: install_libclang.sh  # [unix]
    script: install_libclang.bat  # [win]
    files:
      - Library/lib/libclang.lib  # [win]
      - lib/libclang.so           # [linux]
      - lib/libclang.dylib        # [osx]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        # note that the name (e.g. libclang13) does not necessarily
        # match the version lower bound (e.g. >=14.0.0)
        - {{ pin_subpackage("libclang" ~ libclang_soversion, max_pin=None) }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja                      # [win]
        - make                       # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("libclang" ~ libclang_soversion, exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang" ~ libclang_soversion, exact=True) }}
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        - test -f $PREFIX/lib/libclang.so                   # [linux]
        - test -f $PREFIX/lib/libclang.dylib                # [osx]
        - if not exist %LIBRARY_LIB%\libclang.lib exit 1    # [win]

  - name: clang-{{ major_version }}
    script: install_clang.sh  # [unix]
    script: install_clang.bat  # [win]
    files:
      - lib/clang                                  # [unix]
      - bin/clang-{{ major_version }}              # [unix]
      - Library/lib/clang                          # [win]
      - Library/bin/clang-{{ major_version }}.exe  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja                              # [win]
        - make                               # [unix]
        - llvmdev =={{ version }}            # [build_platform != target_platform]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, exact=True) }}  # [unix]
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, exact=True) }}  # [unix]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        # presence of versioned libraries
        - test -f $PREFIX/lib/libclang-cpp.so.{{ sover }}       # [linux]
        - test -f $PREFIX/lib/libclang-cpp.{{ sover }}.dylib    # [osx]

        # absence of unversioned libraries
        - test ! -f $PREFIX/lib/libclang-cpp.so                 # [linux]
        - test ! -f $PREFIX/lib/libclang-cpp.dylib              # [osx]

        # headers
        - test -f $PREFIX/lib/clang/{{ major_version }}/include/stdatomic.h                 # [unix]
        - if not exist %LIBRARY_LIB%\clang\{{ major_version }}\include\stdatomic.h exit 1   # [win]

        # versioned binaries
        - clang-{{ major_version }} --version

        # absence of unversioned binaries
        - test ! -f $PREFIX/bin/clang                   # [unix]
        - test ! -f $PREFIX/bin/clang-cl                # [unix]
        - test ! -f $PREFIX/bin/clang-cpp               # [unix]
        - if exist %LIBRARY_BIN%\clang.exe exit 1       # [win]
        - if exist %LIBRARY_BIN%\clang-cl.exe exit 1    # [win]
        - if exist %LIBRARY_BIN%\clang-cpp.exe exit 1   # [win]

  - name: clang
    script: install_clang_symlinks.sh  # [unix]
    script: install_clang_symlinks.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd     # [unix]
    requirements:
      # for run-exports
      build:                        # [win]
        - {{ stdlib('c') }}         # [win]
        - {{ compiler('cxx') }}     # [win]
      host:
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - binutils_impl_{{ target_platform }}  # [linux]
        - sysroot_{{ target_platform }}        # [linux]
        - libgcc-devel_{{ target_platform }}   # [linux]
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
    test:
      commands:
        - clang --version
        - clang-cl --version
        - clang-cpp --version

  - name: clangxx
    script: install_clangxx.sh  # [unix]
    script: install_clangxx.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd     # [unix]
    requirements:
      # for run-exports
      build:                        # [win]
        - {{ stdlib('c') }}         # [win]
        - {{ compiler('cxx') }}     # [win]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - libstdcxx-devel_{{ target_platform }}  # [linux]
        # only minor-pin to avoid issues when building new libcxx versions
        - libcxx-devel {{ maj_min }}             # [osx]
        - {{ pin_subpackage("clang", exact=True) }}
    test:
      requires:
        - {{ compiler("cxx") }}
        - gxx_impl_{{ target_platform }}  # [win64]
      files:
        - mytest.cxx
      commands:
        - clang++ --version
        - clang++ -v -c mytest.cxx
        - unset CONDA_BUILD_SYSROOT   # [unix]
        - set "CONDA_BUILD_SYSROOT="  # [win]
        - clang++ -v -c mytest.cxx
        - clang++ -v mytest.cxx --target=x86_64-w64-mingw32  # [win64]

  - name: clang-format-{{ major_version }}
    script: install_clang_format.sh  # [unix]
    files:
      - bin/clang-format-{{ major_version }}                # [unix]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      # for windows, use the clang-format package.
      skip: true  # [win]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        # cannot pin to `cxx_compiler_version` here,
        # because clangxx pins libcxx-devel to `maj_min`
        - libcxx-devel =={{ maj_min }}  # [osx]
        - llvm =={{ version }}
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, max_pin="x.x") }}   # [unix]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        - clang-format-{{ major_version }} --version
        - test ! -f ${PREFIX}/bin/clang-format                   # [unix]
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]

  - name: clang-format
    script: install_clang_format.sh  # [unix]
    script: install_clang_format.bat  # [win]
    files:
      - bin/clang-format               # [unix]
      - Library/bin/clang-format.exe   # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib
        - zstd
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format-" ~ major_version, exact=True) }}      # [unix]
        # cannot pin to `cxx_compiler_version` here,
        # because clangxx pins libcxx-devel to `maj_min`
        - libcxx-devel =={{ maj_min }}  # [osx]
        - llvm =={{ version }}
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, max_pin="x.x") }}          # [unix]
        - {{ pin_subpackage("clang-format-" ~ major_version, exact=True) }}      # [unix]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
    test:
      commands:
        - clang-format --version
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]
        - if exist %LIBRARY_BIN%\c-index-test.exe exit 1         # [win]

  - name: clang-tools
    script: install_clang_tools.sh  # [unix]
    script: install_clang_tools.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - zstd     # [unix]
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format", exact=True) }}
        # cannot pin to `cxx_compiler_version` here,
        # because clangxx pins libcxx-devel to `maj_min`
        - libcxx-devel =={{ maj_min }}  # [osx]
        - llvm =={{ version }}
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - ucrt                                          # [win]
        - {{ pin_subpackage("clang-format", exact=True) }}
        - {{ pin_subpackage("libclang" ~ libclang_soversion, max_pin=None) }}
        - {{ pin_subpackage("libclang-cpp" ~ maj_min, max_pin="x.x") }}   # [unix]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ version }}    # [osx]
      run_constrained:
        - clangdev {{ version }}
    test:
      commands:
        - clang-check --version
        - clang-tidy --version

  - name: python-clang
    build:
      noarch: python
      # Building this output using this recipe is only supported on unix
      # It can still be installed on Windows as it is marked as `noarch: python`
      skip: true  # [not linux64]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    script: build_python_bindings.sh
    requirements:
      host:
        - python {{ python_min }}
      run:
        - python >={{ python_min }}
        - libclang =={{ version }}
    test:
      requires:
        - python {{ python_min }}
      source_files:
        - clang/bindings/python/tests
        - clang/bindings/python/examples/cindex
      imports:
        - clang
        - clang.cindex
      commands:
        - cd clang/bindings/python
        - python -m unittest discover -v

about:
  home: http://llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: clang/LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for Clang
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - JohanMabille
    - inducer
    - isuruf
    - jakirkham
    - katietz
    - SylvainCorlay
    - timsnyder
    - chrisburr
    - xhochy
    - h-vetinari
  feedstock-name: clangdev
