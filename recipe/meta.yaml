{% set version = "13.0.1" %}
{% set major_version = version.split(".")[0] %}
{% set build_number = 10 %}

{% set minor_aware_ext = major_version %}
{% set minor_int = version.split(".")[1] | int %}
{% if minor_int > 0 %}
{% set minor_aware_ext = major_version ~ "." ~ version.split(".")[1] %}
{% endif %}

{% if not variant %}
{% set variant = "default" %}
{% endif %}

# last version in 16.x series; 17.x requires macOS >=10.13
{% set libcxx_bound = "16.0.6" %}

package:
  name: clang_packages
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/llvm-project-{{ version.replace(".rc", "rc") }}.src.tar.xz
    sha256: 326335a830f2e32d06d0a36393b5455d17dc73e0bd1211065227ee014f92cbf8
    patches:
      - patches/0001-Find-conda-gcc-installation.patch
      - patches/0002-Fix-sysroot-detection-for-linux.patch
      - patches/0003-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch
      - patches/0004-Fix-normalizeProgramName-s-handling-of-dots-outside-.patch
      - patches/0005-Set-VERSION-in-osx-as-well.patch
      - patches/0006-Fix-crosscompiling-LLVM-tools.patch
      # Disable -Werror,-Wundef-prefix=TARGET_OS as they are not yet defined in the 10.9 SDK used for osx-64
      # Only enable it for TARGET_OS_OSX.
      - patches/0007-Only-error-on-undefined-TARGET_OS_OSX.patch                    # [osx and x86_64]
      - patches/0008-Improve-logic-for-finding-the-macos-sysroot-for-cond.patch     # [osx]
      # backport https://github.com/llvm/llvm-project/commit/ca80c2438697dd10c60e11c07d68e3b784013b93
      - patches/0009-Driver-Support-GCC-detection-for-GCC-compiled-with-e.patch
      - patches/0010-Remove-trailing-null-bytes-from-the-sysroot-that-com.patch     # [variant and variant.startswith("root_")]

    {% if (variant or "").startswith("root_") or (variant or "").startswith("cling_") %}
      # the following patches are 100% identical between
      # https://github.com/root-project/llvm-project/tree/ROOT-llvm13-20240614-01 and
      # https://github.com/root-project/llvm-project/tree/cling-llvm13-20240614-01
      - patches/root/0001-Support-Add-missing-cstdint-header-to-Signals.h.patch
      - patches/root/0002-D129175-ORC-Fix-weak-hidden-symbols-failure-on-PPC-w.patch
      - patches/root/0003-Backport-D138264-COFF-Improve-JIT-support-of-weak-sy.patch
      - patches/root/0004-D142352-CodeGen-Filter-out-available_externally-alia.patch
      - patches/root/0005-D142443-ORC-Drop-Comdat-when-discarding-IR-symbol.patch
      - patches/root/0006-Re-apply-Only-define-LLVM_EXTERNAL_VISIBILITY-when-b.patch
      - patches/root/0007-Fix-build-failure-with-GCC-11-in-C-20-mode.patch
      - patches/root/0008-Fix-ambiguous-overload-build-failure.patch
      - patches/root/0009-Qualify-calls-to-llvm-format-that-have-std-types-as-.patch
      - patches/root/0010-Avoid-calling-vector-FieldInfo-members-before-FieldI.patch
      - patches/root/0011-Fix-forward-declaration-in-Support-JSON.h.patch
      - patches/root/0012-windows-work-around-a-compiler-bug-with-VS-2022-v17..patch
      - patches/root/0013-Temporary-parsers-should-not-manipulate-global-parse.patch
      - patches/root/0014-Only-reset-extra-parsers-if-not-temporary.patch
      - patches/root/0015-Let-autoload-act-on-fwd-declares.patch
      - patches/root/0016-Remove-macro-and-print-macro.patch
      - patches/root/0017-Find-an-easier-way-of-accessing-CodeGenModule-intern.patch
      - patches/root/0018-From-Vassil-add-debug-printout-of-ModuleBuilder-data.patch
      - patches/root/0019-Cleanup-cached-constant-.str-from-codegen.patch
      - patches/root/0020-Implement-FileManager-uncaching.patch
      - patches/root/0021-Adapt-the-user-of-invalidateCache-to-its-new-signatu.patch
      - patches/root/0022-Mark-the-file-entry-invalid-until-reread.-Invalidate.patch
      - patches/root/0023-In-cases-of-nested-parsing-at-execution-time-sometim.patch
      - patches/root/0024-Implement-soft-reset-of-the-diagnostics-engine.patch
      - patches/root/0025-Access-sema-internals-and-revert-the-list-of-unused-.patch
      - patches/root/0026-Propagate-cache-flags-from-LookupFile-to-FileManager.patch
      - patches/root/0027-Pass-the-OpenFile-flag-also-to-DirectoryLookup.patch
      - patches/root/0028-Make-sure-the-inode-did-not-get-updated-since-we-rea.patch
      - patches/root/0029-More-RAIIs-for-autoloading.patch
      - patches/root/0030-Fix-cling-teardown-issues-when-a-pch-is-attached.-Ku.patch
      - patches/root/0031-Use-raw-string-literals-to-correctly-stringify-and-i.patch
      - patches/root/0032-Accessor-to-is-file-opened-this-is-crucial-info-for-.patch
      - patches/root/0033-Buffer-the-pending-instantiations-in-case-or-recursi.patch
      - patches/root/0034-Also-store-Parser-paren-numbers-likely-fixes-ROOT-69.patch
      - patches/root/0035-Provide-possibly-updated-CodegenOpts-to-StartModule.patch
      - patches/root/0036-Hand-over-deferred-objects-to-the-new-CGModule-fixes.patch
      - patches/root/0037-CGModule-can-have-pending-WeakRefReferences-carry-ov.patch
      - patches/root/0038-Clear-pending-decls-from-Builder-in-case-of-errors-R.patch
      - patches/root/0039-Fix-ROOT-7775-by-making-all-static-init-function-nam.patch
      - patches/root/0040-Do-not-load-the-source-file-just-to-get-an-irrelevan.patch
      - patches/root/0041-Do-not-collect-DeleteExprs-over-incremental-end-of-T.patch
      - patches/root/0042-Keep-the-collection-of-EmittedDeferredDecls-for-subs.patch
      - patches/root/0043-Keep-into-account-if-files-were-virtual.patch
      - patches/root/0044-cxxmodules-Don-t-complain-when-modulemap-for-implici.patch
      - patches/root/0045-Preserve-AnonStructIds-of-mangling-ctx.patch
      - patches/root/0046-Allow-interfaces-to-operate-on-in-memory-buffers-wit.patch
      - patches/root/0047-Remove-argument-from-module-ctor-dtor-signatures.patch
      - patches/root/0048-Implement-a-module-attribute-optional-to-allow-missi.patch
      - patches/root/0049-clang-Allocate-2-bits-to-store-the-constexpr-specifi.patch
      - patches/root/0050-Do-not-evaluate-value-dependent-immediate-invocation.patch
      - patches/root/0051-Deserialize-LValuePathSerializationHelper-s-type-pro.patch
      - patches/root/0052-Add-cplusplus20-as-module-requirement.patch
      - patches/root/0053-survive-Inon-accessible-directory.patch
      - patches/root/0054-Partial-backport-of-D144626-to-fix-Decl-merging-with.patch
      - patches/root/0055-D154328-AST-Add-API-to-iterate-already-loaded-specia.patch
      - patches/root/0056-Commit-to-a-primary-definition-for-a-class-when-we-l.patch
      - patches/root/0057-Do-not-evaluate-dependent-immediate-invocations.patch
      - patches/root/0058-ORC-Fix-sorting-of-contructors-by-priority.patch
      - patches/root/0059-clang-repl-Emit-const-variables-only-once.patch
      - patches/root/0060-PR69076-Fix-crash-with-modules-and-constexpr-destruc.patch
      - patches/root/0061-An-expression-should-only-contain-an-unexpanded-para.patch
      - patches/root/0062-PR95532-ORC-Preserve-order-of-constructors-with-same.patch
    {% endif %}
    # no other cling-specific patches for clang 13
    {% if (variant or "").startswith("root_") %}
      # ROOT-specific patches for clang 13
      - patches/root/0063-Extend-SubstTemplateTypeParmType-to-support-non-cano.patch
      - patches/root/0064-cxxmodules-Don-t-complain-when-modulemap-for-implici.patch
      - patches/root/0065-D153003-ODRHash-Fix-ODR-hashing-of-template-names.patch
      - patches/root/0066-D41416-modules-pch-Do-not-deserialize-all-lazy-templ.patch
      - patches/root/0067-Reinstate-version-of-root-project-root-c9307811.patch
      - patches/root/0068-Improve-ROOT-startup-time-by-not-merging-identifier-.patch
      - patches/root/0069-Before-generating-a-template-instantiation-check-if-.patch
      - patches/root/0070-Duplicate-declarations-of-template-default-argument-.patch
      - patches/root/0071-Implement-implicit-auto-keyword-injection-in-clang-i.patch
      - patches/root/0072-Update-the-DeclContext-used-for-lookup-to-point-to-t.patch
      - patches/root/0073-Expose-all-files-included-in-PCH-PCM-to-FileManager.patch
      - patches/root/0074-Disable-diags-of-dupe-default-args-func-templt-tempo.patch
      - patches/root/0075-Do-not-unload-enum-fwd-decl-but-silence-redecl-diag-.patch
      - patches/root/0076-Do-not-read-the-source-file-to-emit-annotations.patch
      - patches/root/0077-Do-not-read-the-file-to-determine-its-name.patch
      - patches/root/0078-Store-token-literal-data-in-PCH.-Avoids-disk-read-on.patch
      - patches/root/0079-Add-RAII-to-buffer-delayed-infos-for-recursive-parsi.patch
      - patches/root/0080-Improve-int-literal-printing-for-template-args.-To-b.patch
      - patches/root/0081-Fix-fwddecls-of-templates-with-tmplt-arg-defauls-com.patch
      - patches/root/0082-D39714-cxxmodules-Refactor-generation-counter-in-LLV.patch
      - patches/root/0083-Add-support-for-DiagnosticEngine-state-change-within.patch
      - patches/root/0084-Allow-cling-as-ASTSource-to-complete-tmplt-spec.patch
      - patches/root/0085-Disable-validation-of-transent-files.patch
      - patches/root/0086-Import-various-changes-to-the-global-module-index.patch
      - patches/root/0087-Do-not-install-Clang-Cling-Config.cmake-in-the-proje.patch
      - patches/root/0088-AST-Print-honor-AlwaysIncludeTypeForTemplateArgument.patch
      - patches/root/0089-UPSTREAM-Introduce-paged-vector.patch
    {% endif %}

    # name folder for easier deletion; we do the equivalent of downloading
    # the subproject sources, so the work folder then has clang in it;
    # for details see build scripts
    folder: llvm-project

build:
  number: {{ build_number }}

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja  # [win]
    - make   # [unix]
    # Needed to unpack the source tarball
    - m2w64-xz  # [win]
    # "compiling .pyc files" fails without this
    - python >3
    - llvmdev =={{ version }}    # [build_platform != target_platform]
    - libxml2                    # [build_platform != target_platform]
    - zlib                       # [build_platform != target_platform]
    - zstd                       # [build_platform != target_platform]
  host:
    - libcxx-devel {{ cxx_compiler_version }}   # [osx]
    - llvmdev =={{ version }}
    - libxml2
    - zlib
    - zstd

outputs:
  - name: clangdev
    script: install_clangdev.sh  # [unix]
    script: install_clangdev.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and (linux or win)]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("clang-tools", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - llvmdev =={{ version }}
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}     # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                   # [osx]
    test:
      requires:
        - {{ compiler('cxx') }}
        - cmake
      files:
        - mytest.c
      commands:
        # static library
        - test -f $PREFIX/lib/libclangAST.a                         # [unix]
        - test -f $PREFIX/lib/libclangBasic.a                       # [unix]
        - if not exist %LIBRARY_LIB%\clangAST.lib exit 1            # [win]
        - if not exist %LIBRARY_LIB%\clangBasic.lib exit 1          # [win]

        # headers
        - test -f $PREFIX/include/clang/Config/config.h             # [unix]
        - test -f $PREFIX/include/clang/Lex/Lexer.h                 # [unix]
        - if not exist %LIBRARY_INC%\clang\Config\config.h exit 1   # [win]
        - if not exist %LIBRARY_INC%\clang\Lex\Lexer.h exit 1       # [win]

        # symlinks
        - $PREFIX/bin/clang --version           # [unix]
        - $PREFIX/bin/clang++ --version         # [unix]
        - $PREFIX/bin/clang-check --version     # [unix]

        # basic compilation
        - $PREFIX/bin/clang -v -c mytest.c      # [unix]
        - '%LIBRARY_BIN%/clang -v -c mytest.c'  # [win]

  - name: libclang-cpp{{ minor_aware_ext }}
    script: install_libclang_cpp.sh  # [unix]
    files:
      - lib/libclang-cpp.so.{{ minor_aware_ext }}     # [linux]
      - lib/libclang-cpp.{{ minor_aware_ext }}.dylib  # [osx]
    build:
      skip: true  # [win]
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, max_pin="x.x") }}   # [unix]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix and not (variant or "").startswith("root_")]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and linux]
      host:
        - llvm =={{ version }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}     # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                   # [osx]
    test:
      commands:
        - test ! -f "$PREFIX/lib/libclang-cpp.so"                             # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}"         # [linux]
        - test ! -f "$PREFIX/lib/libclang-cpp.dylib"                          # [osx]
        - test -f "$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib"      # [osx]

  - name: libclang-cpp
    # note that this is just an empty wrapper on windows
    script: install_libclang_cpp.sh  # [unix]
    files:                      # [unix]
      - lib/libclang-cpp.so     # [linux]
      - lib/libclang-cpp.dylib  # [osx]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:                                                                # [unix]
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, max_pin="x.x") }}   # [unix]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and linux]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, exact=True) }}  # [unix]
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, exact=True) }}  # [unix]
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}                   # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                                 # [osx]
    test:
      commands:
        - test -f "$PREFIX/lib/libclang-cpp.so"                     # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.dylib"                  # [osx]
        - if exist %LIBRARY_BIN%\\libclang-cpp.dll exit 1           # [win]

  - name: libclang
    script: install_libclang.sh  # [unix]
    script: install_libclang.bat  # [win]
    files:
      - lib/libclang.so              # [linux]
      - lib/libclang.so.13*          # [linux]
      - lib/libclang.dylib           # [osx]
      - lib/libclang.13.dylib        # [osx]
      - Library/bin/libclang.dll     # [win]
      - Library/lib/libclang.lib     # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      run_exports:
        - libclang {{ minor_aware_ext }}.*
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix and not (variant or "").startswith("root_")]
        - zstd
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja                      # [win]
        - make                       # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and (linux or win)]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("clang", exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}     # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                   # [osx]
    test:
      commands:
        - test -f "$PREFIX/lib/libclang.so"                           # [linux]
        - test -f "$PREFIX/lib/libclang.so.{{ minor_aware_ext }}"     # [linux]
        {% if minor_aware_ext != major_version %}
        - test ! -f "$PREFIX/lib/libclang.so.{{ major_version }}"     # [linux]
        - test ! -f "$PREFIX/lib/libclang.{{ major_version }}.dylib"  # [osx]
        {% endif %}
        - test -f "$PREFIX/lib/libclang.dylib"                        # [osx]
        - test -f "$PREFIX/lib/libclang.{{ minor_aware_ext }}.dylib"  # [osx]
        - if not exist %LIBRARY_BIN%\\libclang.dll exit 1             # [win]

  - name: clang-{{ major_version }}
    script: install_clang.sh  # [unix]
    script: install_clang.bat  # [win]
    files:
      - lib/clang                                  # [unix]
      - bin/clang-{{ major_version }}              # [unix]
      - Library/lib/clang                          # [win]
      - Library/bin/clang-{{ major_version }}.exe  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix and not (variant or "").startswith("root_")]
        - zstd
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja                              # [win]
        - make                               # [unix]
        - llvmdev =={{ version }}            # [build_platform != target_platform]
        - zlib                               # [build_platform != target_platform and (linux or win)]
      host:
        - llvm =={{ version }}
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, exact=True) }}  # [unix]
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, exact=True) }}  # [unix]
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}                   # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                                 # [osx]
      run_constrained:
        - clangdev {{ version }}
        - clangxx {{ version }}
        - clang-tools {{ version }}
        - llvm-tools {{ version }}
    test:
      commands:
        - clang-{{ major_version }} --version
        - test ! -f "$PREFIX/bin/clang"                                   # [unix]
        - test ! -f "$PREFIX/bin/clang-cl"                                # [unix]
        - test ! -f "$PREFIX/bin/clang-cpp"                               # [unix]
        - if exist %LIBRARY_BIN%\\clang.exe exit 1                        # [win]
        - if exist %LIBRARY_BIN%\\clang-cl.exe exit 1                     # [win]
        - if exist %LIBRARY_BIN%\\clang-cpp.exe exit 1                    # [win]
        - test ! -f "$PREFIX/lib/libclang-cpp.so"                         # [linux]
        - test -f "$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}"     # [linux]
        - test ! -f "$PREFIX/lib/libclang-cpp.dylib"                      # [osx]
        - test -f "$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib"  # [osx]
        - test -f "$PREFIX/lib/clang/{{ '.'.join(version.split('.')[:3]) }}/include/stdatomic.h"                    # [unix]
        - if not exist %LIBRARY_LIB%\\clang\\{{ '.'.join(version.split('.')[:3]) }}\\include\\stdatomic.h exit 1    # [win]

  - name: clang
    script: install_clang_symlinks.sh  # [unix]
    script: install_clang_symlinks.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd
    requirements:
      host:
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - binutils_impl_{{ target_platform }}  # [linux]
        - sysroot_{{ target_platform }}        # [linux]
        - libgcc-devel_{{ target_platform }}   # [linux]
        - vc14_runtime                         # [win]
        - ucrt                                 # [win]
        - {{ pin_subpackage("clang-" ~ major_version, exact=True) }}
    test:
      commands:
        - clang --version
        - clang-cl --version
        - clang-cpp --version

  - name: clangxx
    script: install_clangxx.sh  # [unix]
    script: install_clangxx.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib     # [unix]
        - zstd
    requirements:
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - libstdcxx-devel_{{ target_platform }}  # [linux]
        - libcxx-devel <={{ libcxx_bound }}      # [osx]
        - vc14_runtime                           # [win]
        - ucrt                                   # [win]
        - {{ pin_subpackage("clang", exact=True) }}
    test:
      requires:
        - {{ compiler("cxx") }}
      files:
        - mytest.cxx
      commands:
        - clang++ --version
        - clang++ -v -c mytest.cxx
        - unset CONDA_BUILD_SYSROOT   # [unix]
        - set "CONDA_BUILD_SYSROOT="  # [win]
        - clang++ -v -c mytest.cxx

  - name: clang-format-{{ major_version }}
    script: install_clang_format.sh  # [unix]
    script: install_clang_format.bat  # [win]
    files:
      - bin/clang-format-{{ major_version }}                # [unix]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      # for windows, use the clang-format package.
      skip: true  # [win]
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix]
        - libxml2  # [unix]
        - zstd     # [unix]
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and (linux or win)]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - llvm =={{ version }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, max_pin="x.x") }}   # [unix]
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}                       # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                                     # [osx]
    test:
      commands:
        - clang-format-{{ major_version }} --version
        - test ! -f ${PREFIX}/bin/clang-format                   # [unix]
        - if exist %LIBRARY_BIN%\\clang-format.exe exit 1        # [win]
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]
        - if exist %LIBRARY_BIN%\\c-index-test.exe exit 1        # [win]

  - name: clang-format
    script: install_clang_format.sh  # [unix]
    script: install_clang_format.bat  # [win]
    files:
      - bin/clang-format               # [unix]
      - Library/bin/clang-format.exe   # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - libxml2
        - zlib
        - zstd
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and (linux or win)]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format-" ~ major_version, exact=True) }}   # [unix]
        - llvm =={{ version }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}   # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, max_pin="x.x") }}  # [unix]
        - {{ pin_subpackage("clang-format-" ~ major_version, exact=True) }}      # [unix]
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}                      # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                                    # [osx]
    test:
      commands:
        - clang-format --version
        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]
        - if exist %LIBRARY_BIN%\\c-index-test.exe exit 1        # [win]

  - name: clang-tools
    script: install_clang_tools.sh  # [unix]
    script: install_clang_tools.bat  # [win]
    build:
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
      ignore_run_exports_from:
        # the build fails if it doesn't find the following, but it's not used
        - zlib     # [unix and not (variant or "").startswith("root_")]
        - libxml2  # [unix]
        - zstd
    requirements:
      build:
        # "compiling .pyc files" fails without this
        - python >3
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja  # [win]
        - make   # [unix]
        - llvmdev =={{ version }}    # [build_platform != target_platform]
        - zlib                       # [build_platform != target_platform and (linux or win)]
      host:
        - {{ pin_subpackage("clang", exact=True) }}
        - {{ pin_subpackage("clangxx", exact=True) }}
        - {{ pin_subpackage("libclang", exact=True) }}
        - {{ pin_subpackage("libclang-cpp", exact=True) }}
        - {{ pin_subpackage("clang-format", exact=True) }}
        - llvm =={{ version }}
        # Use the same requirements as the top-level requirements
        - libcxx-devel {{ cxx_compiler_version }}  # [osx]
        - llvmdev =={{ version }}
        - libxml2
        - zlib
        - zstd
      run:
        - ucrt                                          # [win]
        - {{ pin_subpackage("clang-format", exact=True) }}
        - {{ pin_subpackage("libclang", max_pin="x.x") }}                         # [win]
        - {{ pin_subpackage("libclang-cpp" ~ minor_aware_ext, max_pin="x.x") }}   # [unix]
        - libcxx-devel >={{ version }},<={{ libcxx_bound }}                       # [osx]
        # we need to do this manually because clang_bootstrap has no run-export
        - libcxx >={{ cxx_compiler_version }}                                     # [osx]
        - libclang {{ minor_aware_ext }}.*   # [unix]
      run_constrained:
        - clangdev {{ version }}
    test:
      commands:
        - clang-check --version
        - clang-tidy --version

  - name: python-clang
    build:
      noarch: python
      # Building this output using this recipe is only supported on unix
      # It can still be installed on Windows as it is marked as `noarch: python`
      skip: true  # [not linux64]
      track_features:
        - root         # [variant and variant.startswith("root_")]
      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}
    script: build_python_bindings.sh
    requirements:
      host:
        - python {{ python_min }}
      run:
        - python >={{ python_min }}
        - libclang =={{ version }}
    test:
      requires:
        - python {{ python_min }}
      source_files:
        - clang/bindings/python/tests
        - clang/bindings/python/examples/cindex
      imports:
        - clang
        - clang.cindex
      commands:
        - cd clang/bindings/python
        - python -m unittest discover -v

about:
  home: http://llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: clang/LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for Clang
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - inducer
    - isuruf
    - jakirkham
    - SylvainCorlay
    - timsnyder
    - chrisburr
    - xhochy
    - h-vetinari
  feedstock-name: clangdev
