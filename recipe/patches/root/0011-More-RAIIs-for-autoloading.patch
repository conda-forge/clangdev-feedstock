From 5cf0de13e5596b2f64f2c4f983b4d820114d14d8 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Mon, 26 Aug 2013 15:08:12 +0200
Subject: [PATCH 11/49] More RAIIs for autoloading.

Co-authored-by: Jonas Hahnfeld <jonas.hahnfeld@cern.ch>
---
 clang/include/clang/Lex/Preprocessor.h | 71 ++++++++++++++++++++++++++
 clang/include/clang/Sema/Sema.h        | 26 ++++++++++
 2 files changed, 97 insertions(+)

diff --git a/clang/include/clang/Lex/Preprocessor.h b/clang/include/clang/Lex/Preprocessor.h
index 451795082..381ae7579 100644
--- a/clang/include/clang/Lex/Preprocessor.h
+++ b/clang/include/clang/Lex/Preprocessor.h
@@ -1687,6 +1687,77 @@ public:
                      IsReinject);
   }
 
+  /// A RAII object to temporarily reset PP's state and restore it.
+  class CleanupAndRestoreCacheRAII {
+  private:
+    Preprocessor &PP;
+    CachedTokensTy SavedCachedTokens;
+    CachedTokensTy::size_type SavedCachedLexPos;
+    std::vector<CachedTokensTy::size_type> SavedBacktrackPositions;
+    std::vector<IncludeStackInfo> SavedStack;
+    Lexer *SavedCurLexer;
+    PreprocessorLexer *SavedCurPPLexer;
+    TokenLexer* SavedCurTokenLexer;
+    ConstSearchDirIterator SavedCurDirLookup;
+    LexerCallback SavedCurLexerCallback;
+    unsigned SavedLexLevel;
+
+  public:
+    CleanupAndRestoreCacheRAII(Preprocessor &PP)
+        : PP(PP), SavedCachedTokens(std::move(PP.CachedTokens)),
+          SavedCachedLexPos(PP.CachedLexPos),
+          SavedBacktrackPositions(std::move(PP.BacktrackPositions)),
+          SavedStack(std::move(PP.IncludeMacroStack)),
+          SavedCurLexer(PP.CurLexer.release()), SavedCurPPLexer(PP.CurPPLexer),
+          SavedCurTokenLexer(PP.CurTokenLexer.release()),
+          SavedCurDirLookup(PP.CurDirLookup),
+          SavedCurLexerCallback(PP.CurLexerCallback),
+          SavedLexLevel(PP.LexLevel) {
+      PP.CachedTokens.clear();
+      PP.CachedLexPos = 0;
+      PP.BacktrackPositions.clear();
+      PP.IncludeMacroStack.clear();
+      PP.CurLexer.reset(0);
+      PP.CurPPLexer = 0;
+      PP.CurTokenLexer.reset(0);
+      PP.CurDirLookup = 0;
+      PP.CurLexerCallback = CLK_CachingLexer;
+      PP.LexLevel = 0;
+    }
+
+    void pop() {
+      if (SavedCurLexerCallback == nullptr)
+        return;
+
+      // ExitCachingLexMode();
+      PP.CachedTokens = std::move(SavedCachedTokens);
+      PP.CachedLexPos = SavedCachedLexPos;
+      PP.BacktrackPositions = std::move(SavedBacktrackPositions);
+      PP.IncludeMacroStack = std::move(SavedStack);
+      PP.CurLexer.reset(SavedCurLexer);
+      PP.CurPPLexer = SavedCurPPLexer;
+      PP.CurTokenLexer.reset(SavedCurTokenLexer);
+      PP.CurDirLookup = SavedCurDirLookup;
+      PP.CurLexerCallback = SavedCurLexerCallback;
+      PP.LexLevel = SavedLexLevel;
+
+      SavedCachedTokens.clear();
+      SavedCachedLexPos = 0;
+      SavedBacktrackPositions.clear();
+      SavedStack.clear();
+      SavedCurLexer = 0;
+      SavedCurPPLexer = 0;
+      SavedCurTokenLexer = 0;
+      SavedCurDirLookup = 0;
+      SavedCurLexerCallback = nullptr;
+      SavedLexLevel = ~0U;
+    }
+
+    ~CleanupAndRestoreCacheRAII() {
+      pop();
+    }
+  };
+
   /// Pop the current lexer/macro exp off the top of the lexer stack.
   ///
   /// This should only be used in situations where the current state of the
diff --git a/clang/include/clang/Sema/Sema.h b/clang/include/clang/Sema/Sema.h
index 4dafd6196..518266ffd 100644
--- a/clang/include/clang/Sema/Sema.h
+++ b/clang/include/clang/Sema/Sema.h
@@ -1071,6 +1071,32 @@ public:
     }
   };
 
+  /// A RAII object to temporarily push a decl context and scope.
+  class ContextAndScopeRAII {
+  private:
+    Sema &S;
+    ContextRAII SavedContext;
+    Scope *SavedScope;
+
+  public:
+    ContextAndScopeRAII(Sema &S, DeclContext *ContextToPush, Scope *ScopeToPush)
+        : S(S), SavedContext(S, ContextToPush), SavedScope(S.CurScope) {
+      S.CurScope = ScopeToPush;
+    }
+
+    void pop() {
+      SavedContext.pop();
+      if (!SavedScope)
+        return;
+      S.CurScope = SavedScope;
+      SavedScope = nullptr;
+    }
+
+    ~ContextAndScopeRAII() {
+      pop();
+    }
+  };
+
   /// RAII object to handle the state changes required to synthesize
   /// a function body.
   class SynthesizedFunctionScope {
