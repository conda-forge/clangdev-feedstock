From 12111a99ecd1f6cb0e5502716d4ac3ec53e445a5 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Thu, 16 Apr 2020 12:23:25 +0200
Subject: [PATCH 33/74] Preserve AnonStructIds of mangling ctx:

Across transactions, lambda types ($_0 etc) must keep their
mangling, instead of resetting the counter and recreating the
AnonStructIds. Enable that by swapping old and new builder
cxxabi mangle context. Fixes ROOT-10689.

Swap also TBAA as it references OldBuilder->CXXABI, fixes CodeGen
for opt levels > 0.
---
 clang/lib/CodeGen/ModuleBuilder.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/clang/lib/CodeGen/ModuleBuilder.cpp b/clang/lib/CodeGen/ModuleBuilder.cpp
index 8bcb625882ff..80f3f29d4115 100644
--- a/clang/lib/CodeGen/ModuleBuilder.cpp
+++ b/clang/lib/CodeGen/ModuleBuilder.cpp
@@ -12,6 +12,7 @@
 
 #include "clang/CodeGen/ModuleBuilder.h"
 #include "CGDebugInfo.h"
+#include "CGCXXABI.h"
 #include "CodeGenModule.h"
 #include "clang/AST/ASTContext.h"
 #include "clang/AST/DeclObjC.h"
@@ -28,6 +29,14 @@
 using namespace clang;
 using namespace CodeGen;
 
+namespace {
+  struct CXXABICtxSwapper: clang::CodeGen::CGCXXABI {
+    void SwapCtx(clang::CodeGen::CGCXXABI &other) {
+      std::swap(MangleCtx, ((CXXABICtxSwapper&)other).MangleCtx);
+    }
+  };
+}
+
 namespace clang {
   class CodeGeneratorImpl : public CodeGenerator {
     DiagnosticsEngine &Diags;
@@ -165,6 +174,9 @@ namespace clang {
              && "Newly created module should not have weakRefRefs");
       Builder->WeakRefReferences.swap(OldBuilder->WeakRefReferences);
 
+      ((CXXABICtxSwapper&)*Builder->ABI).SwapCtx(*OldBuilder->ABI);
+      Builder->TBAA.swap(OldBuilder->TBAA);
+
       return M.get();
     }
 
-- 
2.42.0

