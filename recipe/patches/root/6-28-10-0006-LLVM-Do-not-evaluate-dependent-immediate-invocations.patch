From a0fba4aefc07008d33ba79286abf3acceac8c87e Mon Sep 17 00:00:00 2001
From: Danilo Piparo <danilo.piparo@cern.ch>
Date: Tue, 26 Sep 2023 11:11:47 +0200
Subject: [PATCH 6/8] [LLVM] Do not evaluate dependent immediate invocations

This is an adaptation of commit 6627da727b88ef70b74b7d87f274e0a21a9cea45
Fixes https://github.com/root-project/root/issues/13698, a problem
with the new C++ headers from the new macOS SDK.
---
 interpreter/llvm/src/tools/clang/lib/Sema/SemaExpr.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/interpreter/llvm/src/tools/clang/lib/Sema/SemaExpr.cpp b/interpreter/llvm/src/tools/clang/lib/Sema/SemaExpr.cpp
index 01280681d0..f8bf12d39b 100644
--- a/interpreter/llvm/src/tools/clang/lib/Sema/SemaExpr.cpp
+++ b/interpreter/llvm/src/tools/clang/lib/Sema/SemaExpr.cpp
@@ -18763,7 +18763,7 @@ void Sema::MarkDeclRefReferenced(DeclRefExpr *E, const Expr *Base) {
 
   if (auto *FD = dyn_cast<FunctionDecl>(E->getDecl()))
     if (!isConstantEvaluated() && FD->isConsteval() &&
-        !RebuildingImmediateInvocation)
+        !RebuildingImmediateInvocation && !FD->isDependentContext())
       ExprEvalContexts.back().ReferenceToConsteval.insert(E);
   MarkExprReferenced(*this, E->getLocation(), E->getDecl(), E, OdrUse,
                      RefsMinusAssignments);
-- 
2.42.0

