From e43c02f89ca475ea917c1345862833d8eed2d430 Mon Sep 17 00:00:00 2001
From: Lang Hames <lhames@gmail.com>
Date: Mon, 10 Jul 2023 16:32:23 +0000
Subject: [PATCH 76/87] UPSTREAM: [JITLink] Rename TableManager::appendEntry,
 add comment.

Renames TableManager's appendEntry method to registerPreExistingEntry and adds
a comment to explain its purpose. (TableManager subclasses are required to
implement a createEntry method which also appends entries to the map: this
rename aims to avoid any confusion between these methods)

(cherry picked from commit 74f2a76904d7059d4b74d508f962c3efa7775b28)
---
 llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h | 8 +++++++-
 llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp           | 7 ++++---
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h b/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h
index 8953a9fa9730..cc31c1965fc2 100644
--- a/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h
+++ b/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h
@@ -52,7 +52,13 @@ public:
     return *EntryI->second;
   }
 
-  bool appendEntry(Symbol &Target, Symbol &Entry) {
+  /// Register a pre-existing entry.
+  ///
+  /// Objects may include pre-existing table entries (e.g. for GOTs).
+  /// This method can be used to register those entries so that they will not
+  /// be duplicated by createEntry  the first time that getEntryForTarget is
+  /// called.
+  bool registerPreExistingEntry(Symbol &Target, Symbol &Entry) {
     assert(Target.hasName() && "Edge cannot point to anonymous target");
     auto Res = Entries.insert({
         Target.getName(),
diff --git a/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp b/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp
index 44be2ee191e9..aec14b43d31a 100644
--- a/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp
+++ b/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp
@@ -69,9 +69,10 @@ registerExistingGOTEntries(LinkGraph &G,
     for (Block *B : dotTOCSection->blocks())
       for (Edge &E : B->edges())
         if (isGOTEntry(E))
-          TOC.appendEntry(E.getTarget(), G.addAnonymousSymbol(
-                                             *B, E.getOffset(),
-                                             G.getPointerSize(), false, false));
+          TOC.registerPreExistingEntry(E.getTarget(),
+                                       G.addAnonymousSymbol(*B, E.getOffset(),
+                                                            G.getPointerSize(),
+                                                            false, false));
   }
 }
 
