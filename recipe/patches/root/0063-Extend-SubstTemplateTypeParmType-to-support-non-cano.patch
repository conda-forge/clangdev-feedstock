From 94a09757562726a4cb60348398d90edd039afa8a Mon Sep 17 00:00:00 2001
From: Philippe Canal <pcanal@fnal.gov>
Date: Thu, 24 Oct 2013 10:49:05 -0500
Subject: [PATCH 63/89] Extend SubstTemplateTypeParmType to support
 non-canonical types.

Previously SubstTemplateTypeParmType could only keep the canonical
type.  Our hack to support template default replacement with non-canonical
type lead to the creation of SubstTemplateTypeParmType which had their
'canonical type' pointer pointing to non-canonical type.

This patch add a new data member to SubstTemplateTypeParmType to hold
the non-canonical type representation *in addition* to the canonical
type.

This fixes ROOT-5612.
---
 clang/include/clang/AST/Type.h | 8 +++++---
 clang/lib/AST/ASTContext.cpp   | 5 ++++-
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/clang/include/clang/AST/Type.h b/clang/include/clang/AST/Type.h
index 9f46d5337897..adb0d90902b8 100644
--- a/clang/include/clang/AST/Type.h
+++ b/clang/include/clang/AST/Type.h
@@ -4848,10 +4848,12 @@ class SubstTemplateTypeParmType : public Type, public llvm::FoldingSetNode {
 
   // The original type parameter.
   const TemplateTypeParmType *Replaced;
+  QualType Replacement;
 
-  SubstTemplateTypeParmType(const TemplateTypeParmType *Param, QualType Canon)
+  SubstTemplateTypeParmType(const TemplateTypeParmType *Param,
+                            QualType ReplacementType, QualType Canon)
       : Type(SubstTemplateTypeParm, Canon, Canon->getDependence()),
-        Replaced(Param) {}
+        Replaced(Param), Replacement(ReplacementType) {}
 
 public:
   /// Gets the template parameter that was substituted for.
@@ -4862,7 +4864,7 @@ public:
   /// Gets the type that was substituted for the template
   /// parameter.
   QualType getReplacementType() const {
-    return getCanonicalTypeInternal();
+    return Replacement;
   }
 
   bool isSugared() const { return true; }
diff --git a/clang/lib/AST/ASTContext.cpp b/clang/lib/AST/ASTContext.cpp
index 360b5b7c36be..50484fcf4d8d 100644
--- a/clang/lib/AST/ASTContext.cpp
+++ b/clang/lib/AST/ASTContext.cpp
@@ -4598,8 +4598,10 @@ QualType ASTContext::getAttributedType(attr::Kind attrKind,
 QualType
 ASTContext::getSubstTemplateTypeParmType(const TemplateTypeParmType *Parm,
                                          QualType Replacement) const {
+#if 0
   assert(Replacement.isCanonical()
          && "replacement types must always be canonical");
+#endif
 
   llvm::FoldingSetNodeID ID;
   SubstTemplateTypeParmType::Profile(ID, Parm, Replacement);
@@ -4609,7 +4611,8 @@ ASTContext::getSubstTemplateTypeParmType(const TemplateTypeParmType *Parm,
 
   if (!SubstParm) {
     SubstParm = new (*this, TypeAlignment)
-      SubstTemplateTypeParmType(Parm, Replacement);
+      SubstTemplateTypeParmType(Parm, Replacement,
+                                Replacement.getCanonicalType());
     Types.push_back(SubstParm);
     SubstTemplateTypeParmTypes.InsertNode(SubstParm, InsertPos);
   }
