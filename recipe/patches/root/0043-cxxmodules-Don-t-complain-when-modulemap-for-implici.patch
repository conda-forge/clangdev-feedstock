From 358f5cc44962d535824e0c48881e687c4b263d56 Mon Sep 17 00:00:00 2001
From: Vassil Vassilev <v.g.vassilev@gmail.com>
Date: Thu, 21 Feb 2019 09:29:38 +0200
Subject: [PATCH 43/83] [cxxmodules] Don't complain when modulemap for implicit
 modules has changed

This patch (also) aims to make runtime module installable.

This part of code in Clang is comparing the location of "modulemap which
is currently loaded and gives a definition of current module (say, stl)
and "the location of the modulemap where the current implicit module (like stl) was built".

This was problematic for CMSSW, as they should install modulemaps
and prebuilt pcms to other directory. stl and libc pcms should be
prebuilt, installed and used from installed directory, so this check is
redundant for that usecase.
---
 lib/Serialization/ASTReader.cpp | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/lib/Serialization/ASTReader.cpp b/lib/Serialization/ASTReader.cpp
index 2b9f67b22f..cfc0e5303b 100644
--- a/lib/Serialization/ASTReader.cpp
+++ b/lib/Serialization/ASTReader.cpp
@@ -4005,9 +4005,13 @@ ASTReader::ReadModuleMapFileBlock(RecordData &Record, ModuleFile &F,
 
     assert(M && M->Name == F.ModuleName && "found module with different name");
 
+    // Check any additional module map files (e.g. module.private.modulemap)
+    // that are not in the pcm.
+    bool DisableValidation = PP.getPreprocessorOpts().DisablePCHOrModuleValidation !=
+                                  DisableValidationForModuleKind::None;
     // Check the primary module map file.
     auto StoredModMap = FileMgr.getFile(F.ModuleMapPath);
-    if (!StoredModMap || *StoredModMap != ModMap) {
+    if (!DisableValidation && (!StoredModMap || *StoredModMap != ModMap)) {
       assert(ModMap && "found module is missing module map file");
       assert((ImportedBy || F.Kind == MK_ImplicitModule) &&
              "top-level import should be verified");
@@ -4032,8 +4036,7 @@ ASTReader::ReadModuleMapFileBlock(RecordData &Record, ModuleFile &F,
       AdditionalStoredMaps.insert(*SF);
     }
 
-    // Check any additional module map files (e.g. module.private.modulemap)
-    // that are not in the pcm.
+    if (!DisableValidation) {
     if (auto *AdditionalModuleMaps = Map.getAdditionalModuleMapFiles(M)) {
       for (const FileEntry *ModMap : *AdditionalModuleMaps) {
         // Remove files that match
@@ -4056,6 +4059,7 @@ ASTReader::ReadModuleMapFileBlock(RecordData &Record, ModuleFile &F,
       return OutOfDate;
     }
   }
+  }
 
   if (Listener)
     Listener->ReadModuleMapFile(F.ModuleMapPath);
-- 
2.34.1

