From 79c95abaee1b276aac8830e27a3bcdd29b5ee5f9 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Thu, 4 Feb 2021 11:37:23 +0100
Subject: [PATCH 67/87] Allow cling as ASTSource to complete tmplt spec:

cling must be able to provide template specializations (that might be
explicit specializations, residing in a library to be loaded by
autoload, etc), and it must be able to do that *before* clang starts
the instantiation - because otherwise an instantiation (of the same type)
as triggered by LookupHelper is exiting early with instantiation failure
(to prevent recursive instantiations of the same type). I.e. while
SemaTemplateInstantiate's getPatternForClassTemplateSpecialization() will
query external ast sources, this is too late for cling, as it's during the
instantiation and cling cannot instantiate that exact type anymore after
it has made the definition available.

This is visible in PCH mode with Vc on:
```
cmake  -DCMAKE_BUILD_TYPE="Debug" -DCMAKE_CXX_STANDARD="11" -DCMAKE_INSTALL_PREFIX=".../nortcxxmod-llvm9-2-inst" -DLLVM_BUILD_TYPE="Debug" -DLLVM_ENABLE_ASSERTIONS="On" -Dalien="Off" -Darrow="Off" -Dasimage="On" -Dasserts="ON" -Dbuiltin_afterimage="On" -Dbuiltin_cfitsio="Off" -Dbuiltin_davix="On" -Dbuiltin_fftw3="Off" -Dbuiltin_freetype="Off" -Dbuiltin_ftgl="On" -Dbuiltin_gl2ps="On" -Dbuiltin_glew="On" -Dbuiltin_gsl="Off" -Dbuiltin_lz4="On" -Dbuiltin_lzma="On" -Dbuiltin_nlohmannjson="On" -Dbuiltin_openssl="Off" -Dbuiltin_openui5="On" -Dbuiltin_pcre="On" -Dbuiltin_tbb="On" -Dbuiltin_unuran="On" -Dbuiltin_vc="On" -Dbuiltin_vdt="On" -Dbuiltin_veccore="On" -Dbuiltin_xrootd="On" -Dbuiltin_xxhash="On" -Dbuiltin_zlib="On" -Dbuiltin_zstd="On" -Dccache="ON" -Dcefweb="Off" -Dclad="On" -Dcocoa="Off" -Dcuda="Off" -Dcudnn="Off" -Ddataframe="On" -Ddavix="On" -Ddcache="Off" -Ddev="Off" -Ddistcc="Off" -Dfail-on-missing="On" -Dfcgi="Off" -Dfftw3="Off" -Dfitsio="Off" -Dfortran="On" -Dgdml="On" -Dgfal="Off" -Dgsl_shared="Off" -Dgviz="Off" -Dhttp="On" -Dimt="On" -Dlibcxx="Off" -Dmathmore="On" -Dmemstat="Off" -Dminuit2="On" -Dmlp="On" -Dmonalisa="Off" -Dmpi="Off" -Dmysql="Off" -Dodbc="Off" -Dopengl="On" -Doracle="Off" -Dpgsql="Off" -Dpyroot="On" -Dpyroot2="Off" -Dpyroot3="On" -Dpyroot_legacy="Off" -Dpythia6="Off" -Dpythia6_nolink="Off" -Dpythia8="On" -Dqt5web="Off" -Dr="Off" -Droofit="On" -Droottest="ON" -Druntime_cxxmodules="Off" -Dshadowpw="On" -Dsoversion="On" -Dspectrum="On" -Dsqlite="On" -Dssl="On" -Dtesting="ON" -Dtmva="On" -Dtmva-cpu="On" -Dtmva-gpu="Off" -Dtmva-pymva="On" -Dtmva-rmva="Off" -Dunuran="On" -During="Off" -Dvc="On" -Dvdt="On" -Dveccore="On" -Dvecgeom="Off" -Dvmc="On" -Dwin_broken_tests="Off" -Dx11="On" -Dxml="On" -Dxproofd="Off" -Dxrootd="On" .../src -G Ninja
```

as a failure in roottest/root/meta/naming/execCheckNaming.C:

```
In file included from nortcxxmod-llvm9-3/input_line_4:2:
In file included from nortcxxmod-llvm9-3/include/Rtypes.h:191:
In file included from nortcxxmod-llvm9-3/include/TGenericClassInfo.h:22:
In file included from /usr/include/c++/10/vector:67:
/usr/include/c++/10/bits/stl_vector.h:625:7: error: definition with same mangled name '_ZNSt6vectorIPKcSaIS1_EEC2ESt16initializer_listIS1_ERKS2_' as another definition
      vector(initializer_list<value_type> __l,
      ^
/usr/include/c++/10/bits/stl_vector.h:625:7: note: previous definition is here
/usr/include/c++/10/bits/stl_vector.h:678:7: error: definition with same mangled name '_ZNSt6vectorIPKcSaIS1_EED1Ev' as another definition
      ~vector() _GLIBCXX_NOEXCEPT
      ^
/usr/include/c++/10/bits/stl_vector.h:678:7: note: previous definition is here

...
```

which is caused by LookupHelper unloading these decls but failing to unload them from
CodeGen as they were generated during lookup (i.e. without CodeGen). This
assumption is wrong, too, in a couple of ways: LookupHelper must emit decls
created during instantiations to CodeGen, and thus onloading must also be done
with CodeGen.

Most importantly, though, pre-llvm9 these decls did not get unloaded, as the
lookup of the template secialization was successful, as LookupHelper was able
to provide it by specializing the template definition. With llvm9 and without
this patch, no specialization can be provided by LookupHelper as that exact
specialization is already ongoing on higher stack frames (see description of
external AST source query before vs during instantiation).

pre-llvm9 backtrace of this lookup:
```
    diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff4d48, instantiateTemplate=true)
    at /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp:707
    name=0x5555563cd570 "vector<const char*>", intantiateTemplate=true)
    at /home/axel/build/root/master/src/core/metacling/src/TClingClassInfo.cxx:88
    at /home/axel/build/root/master/src/core/metacling/src/TCling.cxx:8155
    at /home/axel/build/root/master/src/core/metacling/src/TCling.cxx:6103
    at /home/axel/build/root/master/src/core/metacling/src/TCling.cxx:6191
    at /home/axel/build/root/master/src/core/metacling/src/TCling.cxx:6414
    at /home/axel/build/root/master/src/core/metacling/src/TCling.cxx:619
    at /home/axel/build/root/master/src/core/metacling/src/TClingCallbacks.cxx:453
    at /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/MultiplexInterpreterCallbacks.h:76
    at /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:285
    at /home/axel/build/root/master/src/interpreter/llvm/src/tools/clang/lib/Sema/MultiplexExternalSemaSource.cpp:136
    at /home/axel/build/root/master/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7307
    at /home/axel/build/root/master/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109
    at /home/axel/build/root/master/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398
```

With llvm9, without this patch:
```
    at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/DeclUnloader.h:292
    diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff4620, instantiateTemplate=true)
    at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp:720
    name=0x5555562fcdc0 "vector<const char*>", intantiateTemplate=true)
    at /home/axel/build/root/master2/src/core/metacling/src/TClingClassInfo.cxx:88
    at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:8172
    at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:6120
    at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:6208
    at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:6431
    at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:619
    at /home/axel/build/root/master2/src/core/metacling/src/TClingCallbacks.cxx:453
    at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/MultiplexInterpreterCallbacks.h:77
    at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:287
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/MultiplexExternalSemaSource.cpp:133
    TSK=clang::TSK_ImplicitInstantiation, Complain=true)
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2566
    ClassTemplateSpec=0x555556543b40, TSK=clang::TSK_ImplicitInstantiation, Complain=true)
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2596
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:8075
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7828
    at /home/axel/build/root/master2/src/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:8141
```
---
 clang/lib/Sema/SemaType.cpp | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/clang/lib/Sema/SemaType.cpp b/clang/lib/Sema/SemaType.cpp
index 8cb1ed28fe3e..a680c3e5bccc 100644
--- a/clang/lib/Sema/SemaType.cpp
+++ b/clang/lib/Sema/SemaType.cpp
@@ -8973,7 +8973,9 @@ bool Sema::RequireCompleteTypeImpl(SourceLocation Loc, QualType T,
 
     // Give the external AST source a chance to complete the type.
     if (auto *Source = Context.getExternalSource()) {
-      if (Tag && Tag->hasExternalLexicalStorage())
+      // AXEL: allows ROOT to autoload/-parse template specializations before
+      // trying to instantiate through the template definition. See ROOT-7462.
+      if (Tag /*&& Tag->hasExternalLexicalStorage()*/)
           Source->CompleteType(Tag);
       if (IFace && IFace->hasExternalLexicalStorage())
           Source->CompleteType(IFace);
