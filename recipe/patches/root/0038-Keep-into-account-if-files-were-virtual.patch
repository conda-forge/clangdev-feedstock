From fb64529e465221a2362c2f441fc0237feef373e3 Mon Sep 17 00:00:00 2001
From: Vassil Vassilev <v.g.vassilev@gmail.com>
Date: Wed, 17 May 2017 15:22:25 +0200
Subject: [PATCH 38/83] Keep into account if files were virtual.

In some cases we do not have files on disk. They are only available in the
FileManager as virtual files and the SourceManager overrides their content.
---
 lib/AST/ASTImporter.cpp                   | 2 +-
 lib/Frontend/VerifyDiagnosticConsumer.cpp | 5 +++++
 lib/Lex/HeaderSearch.cpp                  | 2 +-
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/lib/AST/ASTImporter.cpp b/lib/AST/ASTImporter.cpp
index 787e02029d..4a303b8dfb 100644
--- a/lib/AST/ASTImporter.cpp
+++ b/lib/AST/ASTImporter.cpp
@@ -9029,7 +9029,7 @@ Expected<FileID> ASTImporter::Import(FileID FromID, bool IsBuiltin) {
       // FIXME: We want to re-use the existing MemoryBuffer!
       llvm::Optional<llvm::MemoryBufferRef> FromBuf =
           Cache->getBufferOrNone(FromContext.getDiagnostics(),
-                                 FromSM.getFileManager(), SourceLocation{});
+                                 FromFileManager, SourceLocation{});
       if (!FromBuf)
         return llvm::make_error<ImportError>(ImportError::Unknown);
 
diff --git a/lib/Frontend/VerifyDiagnosticConsumer.cpp b/lib/Frontend/VerifyDiagnosticConsumer.cpp
index 0503ae46a1..c59da6db20 100644
--- a/lib/Frontend/VerifyDiagnosticConsumer.cpp
+++ b/lib/Frontend/VerifyDiagnosticConsumer.cpp
@@ -547,6 +547,11 @@ static bool ParseDirective(StringRef S, ExpectedData *ED, SourceManager &SM,
           Optional<FileEntryRef> File =
               PP->LookupFile(Pos, Filename, false, nullptr, nullptr, CurDir,
                              nullptr, nullptr, nullptr, nullptr, nullptr);
+
+          // Check if the file was virtual
+          if (!File)
+            File = SM.getFileManager().getOptionalFileRef(Filename);
+
           if (!File) {
             Diags.Report(Pos.getLocWithOffset(PH.C - PH.Begin),
                          diag::err_verify_missing_file)
diff --git a/lib/Lex/HeaderSearch.cpp b/lib/Lex/HeaderSearch.cpp
index fb93b7068f..de1b1a03ad 100644
--- a/lib/Lex/HeaderSearch.cpp
+++ b/lib/Lex/HeaderSearch.cpp
@@ -349,7 +349,7 @@ Optional<FileEntryRef> HeaderSearch::getFileAndSuggestModule(
     bool OpenFile /*= true*/, bool CacheFailures /*= true*/) {
   // If we have a module map that might map this header, load it and
   // check whether we'll have a suggestion for a module.
-  auto File = getFileMgr().getFile(FileName, OpenFile, CacheFailures);
+  auto File = getFileMgr().getFileRef(FileName, OpenFile, CacheFailures);
   if (!File) {
     // For rare, surprising errors (e.g. "out of file handles"), diag the EC
     // message.
-- 
2.34.1

